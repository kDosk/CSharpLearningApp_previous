using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CSharpLearningApp.Liniza
{
    /// <summary>
    /// Логика взаимодействия для Page3Teoriya.xaml
    /// </summary>
    public partial class Page3Teoriya : Page
    {
        public Page3Teoriya()
        {
            InitializeComponent();
            TexstBlockTexstss2.Text = "Сокращенная запись методов." +
                " 1) Атрибуты и спецификторы являются необязательными элементами в описании метода. " +
                " На данном этапе атрибуты нами использоваться не будут, а из всех спецификаторов мы в обязательном порядке будем использовать спецификатор static, который позволяет обращатся к методу класса без создания его экземпляра. " +
                " Остальные спецификаторы мы рассмотрим позже." +
                " 2) тип_результата определяет тип значения, возвращаемого методом. " +
                " Это может быть любой тип, включая типы классов, создаваемые программистом, а также тип void, который говорит о том, что метод ничего не возвращает." +
                " 3) имя_метода будет использоваться для обращания к нему из других мест программы и должно быть корректно заданным, " +
                " с учетом требований, накладываемых на идентификаторы в С#." +
                " 4) список_формальных_параметров представляет собой последовательность пар, состоящих из типа данных и идентификатора, разделенных запятыми." +
                " Формальные параметры – это переменные, которые получают значения, передаваемые методу при вызове. " +
                " Если метод не имеет параметров, то список_параметров остается пустым." +
                " 5) return – это оператор безусловного перехода, который завершает работу метода и возвращает значение, стоящие после оператора return, в точку его вызова." +
                " Тип значения должен соответствовать типу_результата, или приводиться к нему. " +
                " Если метод не должен возвращать никакого значения, то указывается тип void, и в этом случае оператор return либо отсутствует, либо указывается без возвращаемого значения." +
                " Метод может возвращать значение, какой-либо результат. В примере выше были определены два метода, которые имели тип void. " +
                " Методы с таким типом не возвращают никакого значения. Они просто выполняют некоторые действия." +
                " Если метод имеет любой другой тип, отличный от void, то такой метод обязан вернуть значение этого типа. Для этого применяется оператор return." +
                " Метод GetHello имеет тип string, следовательно, он должен возвратить строку." +
                " Поэтому в теле метода используется оператор return, после которого указана возвращаемая строка." +
                " Метод GetSum имеет тип int, следовательно, он должен возвратить значение типа int - целое число. " +
                " Поэтому в теле метода используется оператор return, после которого указано возвращаемое число (в данном случае результат суммы переменных x и y)." +
                " То есть после списка параметров ставится оператор =>, после которого идет выполняемая инструкция.";
        }

        private void ButtonExit_Click(object sender, RoutedEventArgs e)
        {
            NavigationService.Navigate(new mainpage());
        }

        private void TestButton_Click(object sender, RoutedEventArgs e)
        {
            NavigationService.Navigate(new Test3());
        }
    }
}
