using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CSharpLearningApp.lilia
{
    /// <summary>
    /// Логика взаимодействия для teorio.xaml
    /// </summary>
    public partial class teorio : Page
    {
        public teorio()
        {
            InitializeComponent();
            TextBlockTextss.Text = "Операции присвоения устанавливают значение. " +
                "В операциях присвоения участвуют два операнда, причем левый " +
                "операнд может представлять только модифицируемое именованное выражение, " +
                "например, переменную\r\n\r\nКак и во многих других языках программирования, в " +
                "C# имеется базовая операция присваивания =, которая присвоивает значение правого" +
                " операнда левому операнду: int number = 23. Здесь переменной number присваивается число 23." +
                " Переменная number представляет левый операнд, которому присваивается значение правого операнда," +
                " то есть числа 23.\r\n\r\nТакже можно выполнять множественно присвоение сразу нескольких переменным одновременно: int a, b, c," +
                "a = b = c 34. Сначала будет вычисляться выражение 34 * 2 / 4, затем полученное значение будет присвоено переменным.\r\n\r\nКроме базовой операции присвоения в C# есть еще ряд операций:\r\n\r\n+=: присваивание после сложения." +
                " Присваивает левому операнду сумму левого и правого операндов: выражение A += B равнозначно выражению A = A + B\r\n\r\n-=: присваивание после вычитания. Присваивает левому операнду разность левого и правого операндов: A -= B эквивалентно A = A - B\r\n\r\n*=: присваивание после умножения." +
                " Присваивает левому операнду произведение левого и правого операндов: A *= B эквивалентно A = A * B\r\n\r\n/=: присваивание после деления. Присваивает левому операнду частное левого и правого" +
                " операндов: A /= B эквивалентно A = A / B\r\n\r\n%=: присваивание после деления по модулю." +
                " Присваивает левому операнду остаток от целочисленного деления левого операнда на правый: A %= B эквивалентно A = A % B\r\n\r\n&=: присваивание после поразрядной конъюнкции. Присваивает левому" +
                " операнду результат поразрядной конъюнкции его битового представления с битовым представлением правого операнда:" +
                " A &= B эквивалентно A = A & B\r\n\r\n|=: присваивание после поразрядной дизъюнкции. Присваивает левому операнду результат поразрядной дизъюнкции его битового представления с битовым представлением" +
                " правого операнда: A |= B эквивалентно A = A | B\r\n\r\n^=: присваивание после операции исключающего ИЛИ." +
                " Присваивает левому операнду результат операции исключающего ИЛИ его битового представления с битовым представлением правого операнда: A ^= B эквивалентно A = A ^ B\r\n\r\n<<=: присваивание после сдвига разрядов влево. Присваивает левому операнду результат сдвига его битового представления влево на" +
                " определенное количество разрядов, равное значению правого операнда: A <<= B эквивалентно A = A << B\r\n\r\n>>=: присваивание после сдвига разрядов вправо. Присваивает левому операнду результат сдвига его битового представления вправо на определенное количество разрядов, равное значению правого операнда:" +
                " A >>= B эквивалентно A = A >> B ";
        }
    }
}
